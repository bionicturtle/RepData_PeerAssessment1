.libPaths()
swirl()
5+7
x <- 5+7
x
x-3
y <- x-3
y
help
info()
bye()
for (i in 1:10) {
print(i)
}
x <- c("a","b","c","d")
for (i in 1:4) {
print(x[i])
}
z <- 5
while(z >= 3&& z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else{
z <- z - 1
}
}
z <- 5
while(z >= 3&& z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else{
z <- z - 1
}
}
z <- 5
while(z >= 3&& z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else{
z <- z - 1
}
}
z <- 5
while(z >= 3&& z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else{
z <- z - 1
}
}
z <- 5
while(z >= 3&& z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ## random walk
z <- z + 1
} else{
z <- z - 1
}
}
fomals(rnorm)
?rnorm
formals(rnorm)
?sd
formals(sd)
mydata <- rnorm(100)
sd(mydata)
mydata <- rnorm(100)
sd(mydata)
mydata <- rnorm(100)
sd(mydata)
formals(lm)
args(lm)
?lm
?paste
add2 <- function(x,y){
x + y
}
add2(3,5)
above10 <- function(x) {
x[x >10]
}
above10(8,9,11,13,15,7,4)
above10 <- function(x) {
use <- x>10
x[use]
}
above10(8,9,11,13,15,7,4)
above10 <- function(x) {
use <- x > 10
x[use]
}
above10(8,9,11,13,15,7,4)
x <- 1:20
above10(x)
above10 <- function(x, n) {
use <- x > n
x[use]
}
above10(x)
above10(x,10)
above10(x,11)
a <- numeric(10)
a
search()
f <- function(x,y) {
x^2 + y/z
}
f(3,5)
f(3,1)
z
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(4)
square(4)
x <- as.Date("2014-03-01")
x
weekdays(x)
months(x)
quarters(x)
?strptime
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
?if
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("Quandl")
library(Quandl)
mydata = Quandl("FRED/DTB1YR")
mydata
Quandl.auth("G5xW3q6kgbALQ8L2srWD")
mydata = Quandl("FRED/DFF")
install.packages("RToolls")
install.packages("RTools")
install.packages('RMySQL',type='source')
Sys.getenv("PATH")
R.home()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("sqldf")
library(sqldf)
install.packages("gsubfn")
library(sqldf)
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("R_HOME")
Sys.getenv("PATH")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
library(RMySQL)
Sys.getenv("MYSQL_HOME")
library(RMySQL)
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(rhdf5)
library(XML)
library(RMySQL)
library(RMySQL)
library(httr)
oauth_endpoints("github")
install.packages("Rcpp")
library(Rcpp)
install.packages("httpuv")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
library(jsonlite)
library(jsonlite)
library(ggvis)
library(jsonlite)
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
install.packages("httpuv")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs
str(acs)
test1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
test1
test1[1:100]
str(test1)
str(acs)
head(acs)
test1 <- sqldf("select pwgtp1,agep from acs where AGEP < 50")
head(test1)
tail(test1)
unique(acs$AGEP)
test2 <- sqldf("select unique * from acs")
test2 <- sqldf("select distinct AGEP from acs")
test2
test2 <- sqldf("select distinct pwgtp1 from acs")
test2
test2 <-  sqldf("select AGEP where unique from acs")
test2 <- sqldf("select distinct pwgtp1 from acs")
head(test2)
test2 <- sqldf("select distinct AGEP from acs")
head(test2)
test2
unique(acs$AGEP)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con
htmlCode = readLines(con)
htmlCode
str(htmlCode)
head(htmlCode)
htmlCode(10)
htmlCode[10]
htmlCode[1:10]
?nchar
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?as.POSIXct
?plot
?legend
library(lattice)
search()
library(datasets)
xplot(Ozond ~ Wind, data = airquality)
xyplot(Ozond ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor (f, labels = c("Group 1", "Group 2"))
xyplot (y ~ x | f, layout = c(2,1))
f
f <- rep(0:1, each=50)
rep(0:1, each=50)
library(ggplot2)
str(mpg)
gplot(displ ~ hwy, data=mpg)
qplot(displ ~ hwy, data=mpg)
qplot(displ, hwy, data=mpg)
?qplot
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, color = manufacturer)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(hwy, fill = drv)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
p <- ggplot(mtcars2)
library(mtcars2)
library(datasets)
p <- ggplot(mtcars2)
library(ggplot2)
p <- ggplot(mtcars2)
head(mtcars2)
search()
datasets
?datasets
library(help = "datasets")
head(mtcars)
p <- ggplot(mtcars)
p
p + geom_point()
p + geom_point(aes(x=disp, y = mpg))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
?panel
?llines
??panel
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?splom
?par
?trellis.par.set
?splom
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) +geom_smooth()
install.packages("Quandl")
mydata = Quandl("FRED/GDP")
library(Quandl)
mydata = Quandl("FRED/GDP")
Quandl.auth("G5xW3q6kgbALQ8L2srWD")
mydata = Quandl("FRED/GDP")
View(mydata)
?Quandl
mydata = Quandl("GOOG/NASDAQ_AAPL")
View(mydata)
bitcoin_USD = Quandl("BAVERAGE/USD")
View(bitcoin_USD)
oil <- Quandl("OPEC/ORB")
View(oil)
View(bitcoin_USD)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c(1,5)]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close")]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")
View(stock_AAPL)
# stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
View(stock_AAPL)
library(ggplot2)
?merge
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01")
View(oil)
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date,y=Close))
ggplot(mergeData, aes(x=Date,y=Close)) + geom_line()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close)) +
geom_line(aes(y=Value))
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
?Quandl.auth
Quandl.auth()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
?library
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
setwd("~/GitHub/RepData_PeerAssessment1")
?merge
library(pander)
library(ggplot2)
panderOptions('digits',2)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
steps.perday.median <- quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
steps.perday.mean <-mean(steps.perday$steps, na.rm=TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
steps.perinterval <- aggregate(activity["steps"], by=activity["interval"],
FUN="mean", na.rm = TRUE)
plot(steps.perinterval, type="l")
interval.maxsteps <- max(steps.perinterval$steps)
interval.max <- steps.perinterval$interval[steps.perinterval$steps == max(steps.perinterval$steps)]
number.nas <- sum(is.na(activity$steps))
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
View(df.merged)
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
View(df.merged)
?suppressWarnings
suppressWarnings(df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
```{r loaddata, echo=TRUE}
library(pander)
library(ggplot2)
panderOptions('digits',2)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
steps.perday.median <- quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
steps.perday.mean <-mean(steps.perday$steps, na.rm=TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
View(steps.perday)
steps.perinterval <- aggregate(activity["steps"], by=activity["interval"],
FUN="mean", na.rm = TRUE)
plot(steps.perinterval, type="l")
interval.maxsteps <- max(steps.perinterval$steps)
interval.max <- steps.perinterval$interval[steps.perinterval$steps == max(steps.perinterval$steps)]
View(steps.perinterval)
plot(steps.perinterval, type="l", title="average daily activity pattern")
?plot
plot(steps.perinterval, type="l", main="average daily activity pattern")
?histogram
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
steps.perday.median <- quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
steps.perday.mean <-mean(steps.perday$steps, na.rm=TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
hist(steps.perday$steps, 10, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
hist(steps.perday$steps, 20, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
number.nas <- sum(is.na(activity$steps))
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
suppressWarnings(df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y)
index <- with(df.merged, order(date, interval))
new.table <- df.merged[index,]
newsteps.perday <- aggregate(new.table["steps.x"], by=new.table["date"],FUN="sum")
hist(newsteps.perday$steps, 20, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
hist(steps.perday$steps, 10, freq=TRUE, main = "Histogram",
ylab = "Frequency (No of Days)", xlab="Steps", col="green")
steps.perinterval[1,1]
steps.perinterval[2,1]
steps.perinterval[2,2]
steps.perinterval[1,2]
steps.perinterval[0,2]
steps.perinterval[1,2]
