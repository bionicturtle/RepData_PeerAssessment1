} else {
10
}
y
install.packages("Quandl")
library(Quandl)
mydata = Quandl("FRED/DTB1YR")
mydata
Quandl.auth("G5xW3q6kgbALQ8L2srWD")
mydata = Quandl("FRED/DFF")
install.packages("RToolls")
install.packages("RTools")
install.packages('RMySQL',type='source')
Sys.getenv("PATH")
R.home()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("sqldf")
library(sqldf)
install.packages("gsubfn")
library(sqldf)
library(RMySQL)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("R_HOME")
Sys.getenv("PATH")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
library(RMySQL)
library(RMySQL)
library(RMySQL)
library(RMySQL)
Sys.getenv("MYSQL_HOME")
library(RMySQL)
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(rhdf5)
library(XML)
library(RMySQL)
library(RMySQL)
library(httr)
oauth_endpoints("github")
install.packages("Rcpp")
library(Rcpp)
install.packages("httpuv")
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
library(jsonlite)
library(jsonlite)
library(ggvis)
library(jsonlite)
library(jsonlite)
install.packages("jsonlite", repos="http://cran.r-project.org")
install.packages("httpuv")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs
str(acs)
test1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
test1
test1[1:100]
str(test1)
str(acs)
head(acs)
test1 <- sqldf("select pwgtp1,agep from acs where AGEP < 50")
head(test1)
tail(test1)
unique(acs$AGEP)
test2 <- sqldf("select unique * from acs")
test2 <- sqldf("select distinct AGEP from acs")
test2
test2 <- sqldf("select distinct pwgtp1 from acs")
test2
test2 <-  sqldf("select AGEP where unique from acs")
test2 <- sqldf("select distinct pwgtp1 from acs")
head(test2)
test2 <- sqldf("select distinct AGEP from acs")
head(test2)
test2
unique(acs$AGEP)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con
htmlCode = readLines(con)
htmlCode
str(htmlCode)
head(htmlCode)
htmlCode(10)
htmlCode[10]
htmlCode[1:10]
?nchar
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?as.POSIXct
?plot
?legend
library(lattice)
search()
library(datasets)
xplot(Ozond ~ Wind, data = airquality)
xyplot(Ozond ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor (f, labels = c("Group 1", "Group 2"))
xyplot (y ~ x | f, layout = c(2,1))
f
f <- rep(0:1, each=50)
rep(0:1, each=50)
library(ggplot2)
str(mpg)
gplot(displ ~ hwy, data=mpg)
qplot(displ ~ hwy, data=mpg)
qplot(displ, hwy, data=mpg)
?qplot
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, color = manufacturer)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, geom = c("point"))
qplot(hwy, fill = drv)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
p <- ggplot(mtcars2)
library(mtcars2)
library(datasets)
p <- ggplot(mtcars2)
library(ggplot2)
p <- ggplot(mtcars2)
head(mtcars2)
search()
datasets
?datasets
library(help = "datasets")
head(mtcars)
p <- ggplot(mtcars)
p
p + geom_point()
p + geom_point(aes(x=disp, y = mpg))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
?panel
?llines
??panel
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?splom
?par
?trellis.par.set
?splom
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) +geom_smooth()
install.packages("Quandl")
mydata = Quandl("FRED/GDP")
library(Quandl)
mydata = Quandl("FRED/GDP")
Quandl.auth("G5xW3q6kgbALQ8L2srWD")
mydata = Quandl("FRED/GDP")
View(mydata)
?Quandl
mydata = Quandl("GOOG/NASDAQ_AAPL")
View(mydata)
bitcoin_USD = Quandl("BAVERAGE/USD")
View(bitcoin_USD)
oil <- Quandl("OPEC/ORB")
View(oil)
View(bitcoin_USD)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c(1,5)]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close")]
View(stock_AAPL)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")
View(stock_AAPL)
# stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL")[,c("Date","Close","Open")]
View(stock_AAPL)
library(ggplot2)
?merge
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
stock_AAPL = Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01")
View(oil)
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date,y=Close))
ggplot(mergeData, aes(x=Date,y=Close)) + geom_line()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close)) +
geom_line(aes(y=Value))
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
?Quandl.auth
Quandl.auth()
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
?library
stock_AAPL <- Quandl("GOOG/NASDAQ_AAPL", start_date="2010-01-01")[,c("Date","Close")]
View(stock_AAPL)
oil <- Quandl("OPEC/ORB", start_date="2010-01-01", authcode = Quandl.auth("G5xW3q6kgbALQ8L2srWD"))
mergeData <- merge(stock_AAPL, oil, by.x = "Date", by.y = "Date")
View(mergeData)
ggplot(mergeData, aes(x=Date)) +
geom_line(aes(y=Close), color="red") +
geom_line(aes(y=Value), color="black")
library(ggplot2)
library (plyr)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
# gives different result
# steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum", na.rm = TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
# trying ggplot
# activity$steps <- as.numeric(activity$steps)
# ggplot(steps.per.day, aes(x=date)) + geom_histogram()
steps.perday$steps <- as.numeric(steps.perday$steps)
median(steps.perday$steps, na.rm=TRUE)
quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
mean(steps.perday$steps, na.rm=TRUE)
# activity$interval <- as.factor(activity$interval)
steps.perinterval <- aggregate(activity["steps"], by=activity["interval"], FUN="mean", na.rm = TRUE)
plot(steps.perinterval, type="l")
library(ggplot2)
library (plyr)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
# gives different result
# steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum", na.rm = TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
# trying ggplot
# activity$steps <- as.numeric(activity$steps)
# ggplot(steps.per.day, aes(x=date)) + geom_histogram()
steps.perday$steps <- as.numeric(steps.perday$steps)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
setwd("~/dh-school/co/ds/5rr")
library(ggplot2)
library (plyr)
activity <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity$date <- as.Date(activity$date)
steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum")
# gives different result
# steps.perday <- aggregate(activity["steps"], by=activity["date"],FUN="sum", na.rm = TRUE)
hist(steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
# trying ggplot
# activity$steps <- as.numeric(activity$steps)
# ggplot(steps.per.day, aes(x=date)) + geom_histogram()
steps.perday$steps <- as.numeric(steps.perday$steps)
median(steps.perday$steps, na.rm=TRUE)
quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
mean(steps.perday$steps, na.rm=TRUE)
# activity$interval <- as.factor(activity$interval)
steps.perinterval <- aggregate(activity["steps"], by=activity["interval"], FUN="mean", na.rm = TRUE)
plot(steps.perinterval, type="l")
View(steps.perinterval)
?max
max(steps.perinterval$steps)
steps.perinterval$interval[steps.perinterval$steps == max(steps.perinterval$steps)]
View(activity)
is.na(activity.steps)
is.na(activity$steps)
sum(is.na(activity$steps))
sum(!is.na(activity$steps))
sum(!is.na(activity))
is.na(activity)
is.na(activity)
sum(is.na(activity))
sum(!is.na(activity))
?is.na
sum(is.na(activity$steps))
View(steps.perday)
t.merge <- merge(activity, steps.perinterval, by.x="interval", by.y"interval", all.x = TRUE)
t.merge <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
View(t.merge)
?merge
t.merge <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE, sort=FALSE)
View(t.merge)
?index
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
index <- with(df.merged, order(date, interval))
index
head(index)
new.table <- df.merged[index,]
View(new.table)
?data.table
View(df.merged)
isna(df.merged$steps.x)
is.na(df.merged$steps.x)
head(is.na(df.merged$steps.x))
df.merged$steps.x <- df.merged$steps.y[is.na(df.merged$steps.x),]
n.index <- isna(df.merged$steps.x)
n.index <- is.na(df.merged$steps.x)
n.index
df.merged$steps.x <- df.merged$steps.y[n.idex,]
df.merged$steps.x <- df.merged$steps.y[n.index,]
df.merged$steps.x <- df.merged$steps.y
View(df.merged)
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
index <- with(df.merged, order(date, interval))
new.table <- df.merged[index,]
df.merged$steps.x <- df.merged$steps.y[n.index]
View(df.merged)
df.merged$steps.x <- df.merged$steps.y[n.index, ]
df.merged$steps.x[n.index] <- df.merged$steps.y
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
View(df.merged)
df.merged <- merge(activity, steps.perinterval, by.x= "interval", by.y= "interval", all.x = TRUE)
df.merged$steps.x[is.na(df.merged$steps.x)] <- df.merged$steps.y
index <- with(df.merged, order(date, interval))
new.table <- df.merged[index,]
View(new.table)
new.steps.perday <- aggregate(new.table["steps"], by=new.table["date"],FUN="sum")
new.steps.perday <- aggregate(new.table["steps.x"], by=new.table["date"],FUN="sum")
View(new.steps.perday)
hist(new.steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
hist(steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
hist(new.steps.perday$steps, freq=TRUE, main = "Histogram", ylab = "Frequency (No of Days)", xlab="Steps", col="green")
median(new.steps.perday$steps, na.rm=TRUE)
quantile(new.steps.perday$steps, probs = 0.5, na.rm=TRUE)
mean(new.steps.perday$steps, na.rm=TRUE)
median(steps.perday$steps, na.rm=TRUE)
quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
mean(steps.perday$steps, na.rm=TRUE)
quantile(steps.perday$steps, probs = 0.5, na.rm=TRUE)
median(new.steps.perday$steps, na.rm=TRUE)
quantile(new.steps.perday$steps, probs = 0.5, na.rm=TRUE)
mean(new.steps.perday$steps, na.rm=TRUE)
?weekdays
weekdays(new.table$dates)
weekdays(new.table$date)
new.table$weekday <- weekdays(new.table$date)
View(new.table)
new.table$weekday <- as.factor(weekdays(new.table$date))
View(new.table)
ggplot(new.table, aes(x=date)) + geom_histogram()
n.steps.perday <- aggregate(new.table["steps"], by=activity[c("date","weekday"],FUN="sum")
n.steps.perday <- aggregate(new.table["steps"], by=activity[c("date","weekday")],FUN="sum")
n.steps.perday <- aggregate(new.table["steps.x"], by=activity[c("date","weekday")],FUN="sum")
View(new.table)
n.steps.perday <- aggregate(new.table["steps.x"], by=new.table[c("date","weekday")],FUN="sum")
View(n.steps.perday)
?weekdats
?weekdays
new.table$weekday <- weekdays(new.table$date)
?grep
txt <- "alive"
grep(text, "does this occur")
test <- grep(text, "does this occur")
test <- grep(text, 'does this occur')
test <- grep(text, "does this occur", fixed=TRUE)
?regexpr
?weekdats
?weekdays
weekdays()
weekdays
weekdays()
?isWeekday
install.packages("timeDate")
?isWeekday
??isWeekday
new.table$weekday[isWeekday(new.table$weekday) <- "Weekday"
new.table$weekday[isWeekday(new.table$weekday)] <- "Weekday"
new.table$weekday[isWeekday(new.table$weekday)] <- "Weekday"
library(timeDate)
new.table$weekday[isWeekday(new.table$weekday)] <- "Weekday"
grep(text, "hello")
grep("hell", "hello")
str(txt)
grep(as.char(text), "hello")
grep(text, c("hello", "goodbye"))
?contains
?str.Contains
?Contains
%in%
test.me <- "hell" %in% "hello"
?match
test.me <- "Monday" %in% c("Monday", "Tuesday")
test.me <- "Mnday" %in% c("Monday", "Tuesday")
v.weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
v.weekend < - c("Saturday", "Sunday")
v.weekend < - c("Saturday", "Sunday")
v.weekend < - c("Saturday", "Sunday")
v.weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
v.weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
v.weekend < - c("Saturday", "Sunday")
v.weekend <- c("Saturday", "Sunday")
new.table$weekday[new.table$weekday %in% v.weekdays] <- "Weekday"
new.table$weekday[new.table$weekday %in% v.weekdays] <- "Weekday"
View(new.table)
tail(new.table)
sum(new.table$weekday == "Weekday")
sum(new.table$weekday == "Saturday")
sum(new.table$weekday == "Sunday")
new.table$weekday[new.table$weekday %in% v.weekend] <- "Weekend"
sum(new.table$weekday == "Sunday")
sum(new.table$weekday == "Weekend")
n.steps.perday <- aggregate(new.table["steps.x"], by=new.table[c("date","weekday")],FUN="sum")
View(n.steps.perday)
new.table$weekday <- as.factor(weekdays(new.table$date))
new.table$weekday <- weekdays(new.table$date)
v.weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
v.weekend <- c("Saturday", "Sunday")
new.table$weekday[new.table$weekday %in% v.weekdays] <- "Weekday"
new.table$weekday[new.table$weekday %in% v.weekend] <- "Weekend"
?factor
factor(new.table$weekday)
new.table$weekday <- factor(new.table$weekday)
View(new.table)
n.steps.perday <- aggregate(new.table["steps.x"], by=new.table[c("date","weekday")],FUN="sum")
View(n.steps.perday)
View(n.steps.perday)
n.steps.perday <- aggregate(new.table["steps.x"], by=new.table[c("interval","weekday")],FUN="sum")
View(n.steps.perday)
ggplot(n.steps.perday, aes(x=interval)) + geom_histogram()
ggplot(n.steps.perday, aes(x=interval)) + geom_line()
View(n.steps.perday)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) + geom_line()
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) + geom_line() + facet_grid(n.steps.perday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) + geom_line() + facet_grid(n.steps.perday$weekday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x) + geom_line() + facet_grid(n.steps.perday$weekday ~ .))
ggplot(n.steps.perday, aes(x=interval, y=steps.x) +
geom_line() +
facet_grid(n.steps.perday$weekday ~ .))
ggplot(n.steps.perday, aes(x=interval, y=steps.x) +
geom_line())
ggplot(n.steps.perday, aes(x=interval, y=steps.x) + geom_line())
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) + geom_line()
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line()
facet_grid(n.steps.perday$weekday ~ .))
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line() +
facet_grid(n.steps.perday$weekday ~ .)
facet_grid(weekday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line() +
facet_grid(weekday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line()
facet_grid(weekday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line()
+ facet_grid(weekday ~ .)
ggplot(n.steps.perday, aes(x=interval, y=steps.x)) +
geom_line() +
facet_grid(weekday ~ .)
setwd("~/dh-school/co/ds/5rr/RepData_PeerAssessment1")
